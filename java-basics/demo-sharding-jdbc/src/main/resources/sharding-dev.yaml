# Sharding 分库分表配置
# !!! 重要: 1. 使用字段加密时, AES Key 必须每个项目单独更换 (rules[!ENCRYPT].encryptors.aes_encryptor.props.aes-key-value)
#
# 注意事项:
#   1. 集群模式下使用雪花算法定义 id 时, 低概率生成重复 id; 务必通过 redis/mysql 等方法, 确保 id 全局唯一
#   2. 使用 Sharding XA 事务时, 必须在主应用注解 @SpringBootApplication(exclude = JtaAutoConfiguration.class)
#
# Song gh on 2024/3/22

# ------------------------------ 目录 ------------------------------
# mode          单机/集群模式配置
# dataSources   数据源配置, 支持多数据源
# rules         规则
#     - !READWRITE_SPLITTING  读写分离
#     - !SHARDING             分库分表
#     - !TRANSACTION          事务
#     - !ENCRYPT              数据库加密
#     - !MASK                 数据库脱敏
# props         其他配置
# ======================================================================

# ------------------------------↓ 单机模式配置 ↓------------------------------
mode:
  type: Standalone
  repository:
    type: JDBC

# ------------------------------↓ 集群模式配置 ↓------------------------------
#mode:
#  type: Cluster
#  repository:
#    type: zookeeper
#    props:
#      namespace: governance_ds
#      server-lists: zookeeper-headless:2181
#      retryIntervalMilliseconds: 500
#      timeToLiveSeconds: 60
#      maxRetries: 3
#      operationTimeoutMilliseconds: 500

# ------------------------------↓ 数据源配置 ↓------------------------------
dataSources:
  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver   # 部分低版本数据库使用 com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/sharding_ds_1?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
    username: root
    password: "RVsdbgjs~4921"
    hikari:
      minimum-idle: 3
      maximum-pool-size: 30
      idle-timeout: 120000

  ds_2:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver   # 部分低版本数据库使用 com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/sharding_ds_2?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
    username: root
    password: "RVsdbgjs~4921"
    hikari:
      minimum-idle: 3
      maximum-pool-size: 30
      idle-timeout: 120000

# ------------------------------↓ 规则配置 ↓------------------------------
rules:
  # ------------------------------↓ 读写分离 ↓------------------------------
  - !READWRITE_SPLITTING
    dataSources:
      # ------------------------------↓ [样例] 读写分离配置 ↓------------------------------
      #demo_read_write_ds:  # 数据源名称
      #  staticStrategy:
      #    writeDataSourceName: ds_1   # 写数据源
      #    readDataSourceNames:        # 读数据源, 允许配置多个
      #      - ds_1
      #      - ds_2
      #  loadBalancerName: round-robin # 负载均衡算法, 所使用的算法必须在 ${rules[!READWRITE_SPLITTING].loadBalancers} 进行定义
      # ==============================↑ [样例] 数据库表配置 ↑==============================

      # 数据源1
      read_write_ds1:
        staticStrategy:
          writeDataSourceName: ds_1
          readDataSourceNames:
            - ds_1
        loadBalancerName: round-robin

      # 数据源2
      read_write_ds2:
        staticStrategy:
          writeDataSourceName: ds_2
          readDataSourceNames:
            - ds_2
        loadBalancerName: round-robin

    # ------------------------------↓ 负载均衡算法定义 ↓------------------------------
    loadBalancers:
      # 随机负载均衡
      random:
        type: RANDOM
        props:
          transaction-read-query-strategy: FIXED_PRIMARY

      # 轮询负载均衡
      round-robin:
        type: ROUND_ROBIN
        props:
          transaction-read-query-strategy: FIXED_PRIMARY

  # ------------------------------↓ 数据库表配置 ↓------------------------------
  # 说明:
  # 1. 不需要分片的表无需配置, sharding 可以自动读取
  - !SHARDING
    tables:
      ## ------------------------------↓ [样例] 数据库表配置 ↓------------------------------
      #demo_table:  # 逻辑表名, 即代码中使用的表名
      #  actualDataNodes: demo_read_write_ds.demo_table${0..9}  # 实际表名 = 数据源名.逻辑表名 + 分表后缀, 其中 ${0..9} 表示分 10 张表, 表后缀为 0~9; 使用动态分表时不加后缀
      #  tableStrategy:
      #    standard:
      #      shardingColumn: id  # 分片依据字段, 经常关联查询的表推荐使用相同字段分片; 不为主键时需要在实体类标注 @Column(updatable = false)
      #      shardingAlgorithmName: database_hash  # 分片算法, 所使用的算法必须在 ${rules[!SHARDING].shardingAlgorithms} 进行定义
      #  # 主键自动生成, 不需要自动生成可跳过
      #  keyGenerateStrategy:
      #    column: id  # 主键名称
      #    keyGeneratorName: snowflake  # 主键自动生成算法, 所使用的算法必须在 ${rules[!SHARDING].keyGenerators} 进行定义
      ## ==============================↑ [样例] 数据库表配置 ↑==============================

      demo_entity_sharding:
        actualDataNodes: read_write_ds1.demo_entity_sharding${0..2}
        tableStrategy:
          standard:
            shardingColumn: id
            shardingAlgorithmName: database_hash
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake

      demo_entity_sharding_copy:
        actualDataNodes: read_write_ds1.demo_entity_sharding_copy${0..2}
        tableStrategy:
          standard:
            shardingColumn: demo_entity_id
            shardingAlgorithmName: database_hash
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake

      demo_entity_sharding_extra_copy:
        actualDataNodes: read_write_ds2.demo_entity_sharding_extra_copy${0..2}
        tableStrategy:
          standard:
            shardingColumn: demo_entity_id
            shardingAlgorithmName: database_hash
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake

      demo_entity_sharding_time:
        actualDataNodes: read_write_ds2.demo_entity_sharding_time
        tableStrategy:
          standard:
            shardingColumn: create_time
            shardingAlgorithmName: time_sharding
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake

    # ------------------------------↓ 绑定表 ↓------------------------------
    # 绑定的表之间 join 可以避免产生笛卡尔积, 要求分片规则一致(字段名称可以不同)
    bindingTables:
      - demo_entity_sharding, demo_entity_sharding_copy

    # ------------------------------↓ 广播表 ↓------------------------------
    # 广播表在所有数据源下均有副本且全局同步, 一般为字典或基础配置
    broadcastTables:
      - dict_data

    # ------------------------------↓ 默认分库分表规则 ↓------------------------------
    # ---- 默认规则仅对 ${rules.tables} 定义的表生效, 并不适用于未定义的表 ----
    # 默认分库策略
    defaultDatabaseStrategy:
      none:
    # 默认分片策略
    defaultTableStrategy:
      standard:
        shardingColumn: id  # 分片依据字段
        shardingAlgorithmName: database_hash  # 分片算法
    # 默认分片依据字段
    defaultShardingColumn: id

    # ------------------------------↓ 分片算法定义 ↓------------------------------
    shardingAlgorithms:
      # 分片策略--根据 Hash + 取模
      database_hash:
        type: HASH_MOD
        props:
          sharding-count: 3  # 分片数(使用此方法分片的表, 分片数不得小于此数)

      # 分片策略--根据时间动态管理(使用此方法时, actualDataNodes 表名需与逻辑表名相同且无分表后缀)
      time_sharding:
        type: CLASS_BASED
        props:
          strategy: STANDARD  # 标准分片类型
          algorithmClassName: com.collin.demo.sharding.sharding.algorithm.table.TimeShardingAlgorithm  # 算法路径

    # ------------------------------↓ 主键自动生成算法定义 ↓------------------------------
    # ---- 非内置方法需要在代码中 implements KeyGenerateAlgorithm ----
    keyGenerators:
      # sharding 内置的雪花算法, 集群部署时推荐使用自定义的雪花算法
      snowflake:
        type: SNOWFLAKE

      # 集群部署时使用的雪花算法, 通过 redis 防止 id 重复
      cluster_snowflake:
        type: clusterSnowflakeId

    # ------------------------------↓ 分片审计 ↓------------------------------
    ## 启用分片审计
    #defaultAuditStrategy:
    #  auditorNames:  # 启用的分片审计方法名称, 所有方法必须在 ${rules.auditors} 定义
    #    - sharding_key_required_auditor
    #  allowHintDisable: true

    # 定义分片审计方法
    auditors:
      # 默认的分片审计方法, 要求 where 语句必须包含分片键
      sharding_key_required_auditor:
        type: DML_SHARDING_CONDITIONS

  # ------------------------------↓ 事务 ↓------------------------------
  - !TRANSACTION
    # 使用时必须在主应用注解 @SpringBootApplication(exclude = JtaAutoConfiguration.class), 以屏蔽 Spring 自动加载
    defaultType: XA
    providerType: Atomikos

  # ------------------------------↓ 字段加密 ↓------------------------------
  - !ENCRYPT
    tables:
      ## ------------------------------↓ [样例] 字段加密 ↓------------------------------
      #demo_table:   # 逻辑表名, 即代码中使用的表名
      #  columns:
      #    aes_name: # 逻辑字段名, 即代码中使用的字段名
      #      cipherColumn: aes_name        # 密文数据所在字段, 通常与逻辑字段列相同
      #      plainColumn: plain_name       # 明文数据所在字段, 对应的实体类字段需要标记 @Transient 防止重复解析; 不使用明文可跳过
      #      encryptorName: aes_encryptor  # 加密算法, 所使用的算法必须在 ${rules[!ENCRYPT].encryptors} 进行定义
      #      queryWithCipherColumn: false  # true = 使用密文字段(cipherColumn)查询, 不支持 like; false = 使用明文字段(plainColumn)查询
      #  # queryWithCipherColumn 也可配置在 columns 同级, 对当前表所有加密字段生效; 也可配置在 tables 同级, 对所有表所有加密字段生效
      ## ==============================↑ [样例] 字段加密 ↑==============================

      demo_entity_sharding:
        columns:
          aes_name:
            cipherColumn: aes_name  # 加密数据所在列, 可以与当前列相同
            plainColumn: plain_name  # 明文数据所在列
            encryptorName: aes_encryptor  # 加密方法
            queryWithCipherColumn: false  # true = 使用密文查询, false = 保持明文查询

      demo_entity_sharding_copy:
        columns:
          md5name:
            cipherColumn: md5name  # 加密数据所在列, 可以与当前列相同
            plainColumn: plain_name  # 明文数据所在列
            encryptorName: md5_encryptor  # 加密方法
            queryWithCipherColumn: false  # true = 使用密文查询, false = 保持明文查询

    # ------------------------------↓ 加密算法定义 ↓------------------------------
    encryptors:
      # AES 加密
      aes_encryptor:
        type: AES
        props:
          # ---------------!!! [重要] AES Key, 每个项目必须单独更换 !!!---------------
          aes-key-value: xqXOssWFxZTIhcKg
          # ===============!!! [重要] AES Key, 每个项目必须单独更换 !!!===============

      # MD5 加密
      md5_encryptor:
        type: MD5

  # ------------------------------↓ 字段脱敏 ↓------------------------------
  # 说明:
  # 1. 脱敏仅在查询时生效, 数据库字段不会被改动
  - !MASK
    tables:
      ## ------------------------------↓ [样例] 字段脱敏 ↓------------------------------
      #demo_table:  # 逻辑表名, 即代码中使用的表名
      #  columns:
      #    masked_name:  # 逻辑字段名, 即代码中使用的字段名
      #      maskAlgorithm: generic_table_random_replace  # 脱敏算法, 所使用的算法必须在 ${rules[!MASK].maskAlgorithms} 进行定义
      ## ==============================↑ [样例] 字段脱敏 ↑==============================

      demo_entity_sharding:
        columns:
          masked_name:
            maskAlgorithm: keep_first_3_last_4_mask

    # ------------------------------↓ 脱敏算法定义 ↓------------------------------
    maskAlgorithms:
      # MD5 脱敏
      md5_mask:
        type: MD5

      # 遮盖首个指定字符前所有内容
      mask_before_special_chars_mask:
        type: MASK_BEFORE_SPECIAL_CHARS
        props:
          special-chars: '@'  # 出现的特殊字符
          replace-char: '*'  # 遮盖内容使用的字符

      # 遮盖首个指定字符后所有内容
      mask_after_special_chars_mask:
        type: MASK_AFTER_SPECIAL_CHARS
        props:
          special-chars: '@'  # 出现的特殊字符
          replace-char: '*'  # 遮盖内容使用的字符

      # 保留 x 至 y 位字符(从 0 开始), 遮盖其余内容
      keep_from_x_to_y:
        type: KEEP_FROM_X_TO_Y
        props:
          from-x: 1  # 起始位置(从 0 开始)
          to-y: 2  # 结束位置(从 0 开始)
          replace-char: '*'

      # 遮盖 x 至 y 位字符(从 0 开始)
      mask_from_x_to_y:
        type: MASK_FROM_X_TO_Y
        props:
          from-x: 1  # 起始位置(从 0 开始)
          to-y: 2  # 结束位置(从 0 开始)
          replace-char: '*'

      # 保留前 n 后 m 位字符, 遮盖其余内容
      keep_first_3_last_4_mask:
        type: KEEP_FIRST_N_LAST_M
        props:
          first-n: 3  # 保持前 n 位字符不变
          last-m: 4  # 保持后 m 位字符不变
          replace-char: '*'  # 遮盖内容使用的字符
      keep_first_4_last_4_mask:
        type: KEEP_FIRST_N_LAST_M
        props:
          first-n: 4  # 保持前 n 位字符不变
          last-m: 4  # 保持后 m 位字符不变
          replace-char: '*'  # 遮盖内容使用的字符

      # 根据字符类型替换
      generic_table_random_replace:
        type: GENERIC_TABLE_RANDOM_REPLACE
        props:
          uppercase-letter-codes: 'U'  # 替换大写字母的字符
          lowercase-letter-codes: 'l'  # 替换小写字母的字符
          digital-codes: 'd'  # 替换数字的字符
          special-codes: 'Z'  # 替换特殊符号(包括中文)的字符

# ------------------------------↓ 其他 ↓------------------------------
props:
  sql-show: true  # 是否在日志中打印实际的 sql
  proxy-hint-enabled: false    # 是否允许在 ShardingSphere-Proxy 中使用 Hint