# Sharding 分库分表配置
# 注意事项:
#   1. 集群模式下使用雪花算法定义 id 时, 低概率生成重复 id; 务必通过 redis/mysql 等方法, 确保 id 全局唯一
#   2. 数据库表分片数变动时, 需要在分片算法处同步修改相关参数
#   3. 使用 Sharding XA 事务时, 必须在主应用注解 @SpringBootApplication(exclude = JtaAutoConfiguration.class)
#
# --Song gh on 2024/3/22

# ------------------------------ 目录 ------------------------------
# mode          单机/集群模式配置
# dataSources   数据源配置, 支持多数据源
# rules         规则
#     - !READWRITE_SPLITTING  读写分离
#     - !SHARDING             分库分表
#     - !TRANSACTION          事务
#     - !ENCRYPT              数据库加密
#     - !MASK                 数据库脱敏
# props         其他配置
# ======================================================================

# ------------------------------↓ 单机模式配置 ↓------------------------------
mode:
  type: Standalone
  repository:
    type: JDBC

# ------------------------------↓ 集群模式配置 ↓------------------------------
#mode:
#  type: Cluster
#  repository:
#    type: zookeeper
#    props:
#      namespace: governance_ds
#      server-lists: zookeeper-headless:2181
#      retryIntervalMilliseconds: 500
#      timeToLiveSeconds: 60
#      maxRetries: 3
#      operationTimeoutMilliseconds: 500

# ------------------------------↓ 数据源配置 ↓------------------------------
dataSources:
  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver   # 部分低版本数据库使用 com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/sharding_ds_1?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
    username: root
    password: "RVsdbgjs~4921"
    hikari:
      minimum-idle: 3
      maximum-pool-size: 30
      idle-timeout: 120000

#  ds_2:
#    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
#    driverClassName: com.mysql.cj.jdbc.Driver   # 部分低版本数据库使用 com.mysql.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/sharding_ds_2?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
#    username: root
#    password: "RVsdbgjs~4921"
#    hikari:
#      minimum-idle: 3
#      maximum-pool-size: 30
#      idle-timeout: 120000

# ------------------------------↓ 规则配置 ↓------------------------------
rules:
  # ------------------------------↓ 读写分离 ↓------------------------------
  - !READWRITE_SPLITTING
    dataSources:
      # 自定义数据源名称
      read_write_ds:
        staticStrategy:
          writeDataSourceName: ds_1
          readDataSourceNames:
            - ds_1
        loadBalancerName: random-robin

    loadBalancers:
      random:
        type: RANDOM
        props:
          transaction-read-query-strategy: FIXED_PRIMARY
      random-robin:
        type: ROUND_ROBIN
        props:
          transaction-read-query-strategy: FIXED_PRIMARY

  # ------------------------------↓ 表配置 ↓------------------------------
  # 不需要分片的表无需配置, sharding 可以自动读取
  - !SHARDING
    tables:
      # 需要分片的表名(不含后缀)
      demo_entity_sharding:
        # 实际表名, 格式 = 数据源名称(见 ${rules.dataSources}).表名(含后缀), 如: read_write_ds.demo_table${0..9} 表示分 10 张表, 表后缀为 0~9
        actualDataNodes: read_write_ds.demo_entity_sharding${0..2}  # 表名后的 ${0..9} 表示分10张表
        # 分片规则
        tableStrategy:
          standard:
            # 分片时依据的字段(使用唯一性 id)
            shardingColumn: id
            # 分片使用的算法, 需要在 ${rules.shardingAlgorithms} 进行定义
            shardingAlgorithmName: database_hash
        # 主键自动生成值的规则
        keyGenerateStrategy:
          # 主键名称
          column: id
          # 生成策略, 需要在 ${rules.keyGenerators} 进行定义
          keyGeneratorName: myKeyGenerators

      # 需要分片的表名(不含后缀)
      demo_entity_sharding_copy:
        # 实际表名, 格式 = 数据源名称(见 ${rules.dataSources}).表名(含后缀), 如: read_write_ds.demo_table${0..9} 表示分 10 张表, 表后缀为 0~9
        actualDataNodes: read_write_ds.demo_entity_sharding_copy${0..2}  # 表名后的 ${0..9} 表示分10张表
        # 分片规则
        tableStrategy:
          standard:
            # 分片时依据的字段(使用唯一性 id)
            shardingColumn: demo_entity_id
            # 分片使用的算法, 需要在 ${rules.shardingAlgorithms} 进行定义
            shardingAlgorithmName: database_hash
        # 主键自动生成值的规则
        keyGenerateStrategy:
          # 主键名称
          column: id
          # 生成策略, 需要在 ${rules.keyGenerators} 进行定义
          keyGeneratorName: myKeyGenerators

    # 绑定表(避免 join 产生笛卡尔积), 要求分片规则必须一致(字段名称可以不同)
    bindingTables:
      - demo_entity_sharding, demo_entity_sharding_copy

    # ------------------------------↓ 默认分库分表规则 ↓------------------------------
    # ---- 需要注意的是, 默认规则仅对 ${rules.tables} 定义的表生效, 并不适用于未定义的表 ----
    # 默认分库策略
    defaultDatabaseStrategy:
      none:
    # 默认分片策略
    defaultTableStrategy:
      standard:
        # 分片时依据的字段(使用唯一性 id)
        shardingColumn: id
        # 分片使用的算法, 需要在 ${rules.shardingAlgorithms} 进行定义
        shardingAlgorithmName: database_hash
    # 默认分片依据的字段
    defaultShardingColumn: id

    # ------------------------------↓ 分片方法定义 ↓------------------------------
    # 所有分片方法必须在此定义
    shardingAlgorithms:
      # 分片策略--根据 Hash + 取模
      database_hash:
        type: HASH_MOD
        props:
          # 分片数(使用此方法分片的表, 分片数必须与此一致)
          sharding-count: 3

    # 主键自动生成的规则
    keyGenerators:
      # 规则名称
      myKeyGenerators:
        type: myId

      # 内置雪花算法, 推荐使用自定义的雪花算法
      snowflake:
        type: SNOWFLAKE

    auditors:
      sharding_key_required_auditor:
        type: DML_SHARDING_CONDITIONS
  # ------------------------------↓ 事务 ↓------------------------------
  - !TRANSACTION
    # 使用时必须在主应用注解 @SpringBootApplication(exclude = JtaAutoConfiguration.class), 以屏蔽 Spring 自动加载
    defaultType: XA
    providerType: Atomikos

  # ------------------------------↓ 数据库加密 ↓------------------------------
  # Encrypt-加密规则
  #  - !ENCRYPT
  #    tables:
  #      # 需要加密的表
  #      base_user:
  #        # 需要加密的列
  #        columns:
  #          name:
  #            cipherColumn: name
  #            encryptorName: aes_encryptor
  #          username:
  #            cipherColumn: username
  #            encryptorName: aes_encryptor
  #          mobile:
  #            cipherColumn: mobile
  #            encryptorName: aes_encryptor
  #          idcard_no:
  #            cipherColumn: idcard_no
  #            encryptorName: aes_encryptor
  #        queryWithCipherColumn: true
  #    encryptors:
  #      aes_encryptor:
  #        type: AES
  #        props:
  #          aes-key-value: xc0528WM1ST1SGH3
  #      md5_encryptor:
  #        type: MD5
  #      like_encryptor:
  #        type: CHAR_DIGEST_LIKE

  # ------------------------------↓ 数据库脱敏 ↓------------------------------
#  - !MASK
#    tables:
#      base_user:
#        columns:
#          #          name:
#          #            maskAlgorithm: mask_before_special_chars_mask
#          mobile:
#            maskAlgorithm: keep_first_3_last_4_mask
#          idcard_no:
#            maskAlgorithm: keep_first_4_last_4_mask
#      base_identity:
#        columns:
#          idcard_no:
#            maskAlgorithm: keep_first_4_last_4_mask
#    maskAlgorithms:
#      md5_mask:
#        type: MD5
#      mask_before_special_chars_mask:
#        type: MASK_BEFORE_SPECIAL_CHARS
#        props:
#          special-chars: '@'
#          replace-char: '*'
#      keep_first_3_last_4_mask:
#        type: KEEP_FIRST_N_LAST_M
#        props:
#          first-n: 3
#          last-m: 4
#          replace-char: '*'
#      keep_first_4_last_4_mask:
#        type: KEEP_FIRST_N_LAST_M
#        props:
#          first-n: 4
#          last-m: 4
#          replace-char: '*'

# ------------------------------↓ 其他 ↓------------------------------
props:
  sql-show: true
  proxy-hint-enabled: true