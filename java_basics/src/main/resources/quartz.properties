# Quartz 定时任务配置

# 调度器名称(多个后端应用使用同名调度器时, 定时任务会在所有应用间自动分配, 且不会重复执行)
org.quartz.scheduler.instanceName=QuartzDemoScheduler
# 调度器实例编号自动生成
org.quartz.scheduler.instanceId=AUTO
# 是否在 Quartz 执行一个 job 前使用 UserTransaction
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false

# ------------------------------ 线程池配置 ------------------------------
# 线程池的实现类
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 线程池中的线程数量
org.quartz.threadPool.threadCount=10
# 线程优先级
org.quartz.threadPool.threadPriority=5
# 配置是否启动自动加载数据库内的定时任务，默认true
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
# 是否设置为守护线程，设置后任务将不会执行
# org.quartz.threadPool.makeThreadsDaemons=true

# ------------------------------ 持久化配置 ------------------------------
# JobDataMaps是否都为String类型
org.quartz.jobStore.useProperties=true
# 数据表的前缀，默认QRTZ_
org.quartz.jobStore.tablePrefix=QRTZ_
# 最大能忍受的触发超时时间
org.quartz.jobStore.misfireThreshold=60000
# 是否以集群方式运行
org.quartz.jobStore.isClustered=true
# 调度实例失效的检查时间间隔，单位毫秒
org.quartz.jobStore.clusterCheckinInterval=2000
# 数据保存方式为数据库持久化
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# 数据库代理类，一般org.quartz.impl.jdbcjobstore.StdJDBCDelegate可以满足大部分数据库
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 数据库别名 随便取
org.quartz.jobStore.dataSource=qzDS

# 数据库连接池，将其设置为druid
org.quartz.dataSource.qzDS.connectionProvider.class=com.demo.quartz.config.DruidConnectionProvider
# 数据库引擎
org.quartz.dataSource.qzDS.driver=com.mysql.cj.jdbc.Driver
# 数据库连接
org.quartz.dataSource.qzDS.URL=jdbc:mysql://192.168.11.188:3306/quartz_jobs?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
# 数据库用户
org.quartz.dataSource.qzDS.user=root
# 数据库密码
org.quartz.dataSource.qzDS.password=!Llkt@2020
# 允许最大连接
org.quartz.dataSource.qzDS.maxConnection=5
# 验证查询sql,可以不设置
org.quartz.dataSource.qzDS.validationQuery=select 0 from dual